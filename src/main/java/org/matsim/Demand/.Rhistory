library(data.table)
library(dplyr)
library(lubridate)
library(magrittr)
library(ggplot2)
library(lattice)
library(reshape2)
library(tidyr)
library(rgdal)
library(tmap)
library(maptools)
library(sf)
library(formattable)
#Import Travel Data and Town shp
setwd("D:\\TUM\\TS\\Master Thesis\\matsim-example-project\\src\\main\\java\\org\\matsim\\Demand")
TravelData <- read.csv("NationalTravelSurveyData_Weighted.csv",encoding = "UTF-8",header = T, stringsAsFactors=F)
TP_SHP <- st_read(dsn="D:\\TUM\\TS\\Master Thesis\\matsim-example-project\\src\\main\\java\\org\\matsim\\Demand\\SHP", layer="TPMetropolitanDistricts")
County_Town_NameList <- read.csv("County_Town_NameList.csv",header = T, stringsAsFactors=F)
# Assign County and Town name to TravelData
for(i in 1:nrow(TravelData)){
for(j in 1:nrow(County_Town_NameList)){
if(TravelData$OriginTripDistrict[i] == County_Town_NameList$COUNTY_TOWN_ID[j]) {
TravelData$OriginTripTownName[i] <- County_Town_NameList$COUNTY_TOWN_NAME[j]
}
if(TravelData$TripPurposeDistrict[i] == County_Town_NameList$COUNTY_TOWN_ID[j]) {
TravelData$DestinationTripTownName[i] <- County_Town_NameList$COUNTY_TOWN_NAME[j]
}}}
rm(i,j)
#Combine TP_SHP County and Town name
TP_SHP$COUNTY_TOWN_NAME <- paste(TP_SHP$COUNTYNAME,TP_SHP$TOWNNAME,sep = "")
TP_SHP$TOWNID <- as.character(TP_SHP$TOWNID)
for(i in 1:nrow(TravelData)){
for(j in 1:nrow(TP_SHP)){
if(TravelData$OriginTripTownName[i] == TP_SHP$COUNTY_TOWN_NAME[j]) {
TravelData$origin[i] <- TP_SHP$TOWNID[j]
}
if(TravelData$DestinationTripTownName[i] == TP_SHP$COUNTY_TOWN_NAME[j]) {
TravelData$destination[i] <- TP_SHP$TOWNID[j]
}}}
rm(i,j)
TravelData$toFromPrefix <- paste(TravelData$OriginTripTownName,TravelData$DestinationTripTownName,sep = "-")
#Extract data
names(TravelData)[1] <- "Person_ID"
TravelData$TotalTravelTime <- TravelData$TravelTime_1 + TravelData$TravelTime_2 + TravelData$TravelTime_3 + TravelData$TravelTime_4
TravelData$OutVehTime <- TravelData$TotalTravelTime - TravelData$InVehTime
View(TravelData)
TravelData <- as.data.table(select(TravelData,c("Person_ID","Age","TripPurpose","Mode","Mode_1","Mode_2","Mode_3","Mode_4",
"TotalTravelTime","InVehTime","OutVehTime","TravelTime_1","TravelTime_2","TravelTime_3","TravelTime_4",
"origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix")))
pop <- TravelData[,.N,by=c("origin","destination")]
carShare <- TravelData[,.N,by=c("origin","destination","Mode")] #also can derive share of other mode like scooterShare
View(pop)
View(carShare)
View(TravelData)
pop <- TravelData[,.N,by=c("toFromPrefix")]
carShare <- TravelData[,.N,by=c("toFromPrefix","Mode")] #also can derive share of other mode like scooterShare
View(pop)
pop2 <- TravelData[,.N,by=c("origin","destination")]
diff(pop,pop2)
diff(pop2,pop)
View(pop2)
View(TravelData)
carShare <- TravelData[,.N,by=c("toFromPrefix","Mode")] #also can derive share of other mode like scooterShare
carShare <- TravelData[,.N,by=c("origin","destination","Mode")]
View(pop)
View(pop2)
comparedf(pop2,pop)
setdiff(pop2,pop)
setdiff(pop2$N,pop$N)
View(TravelData)
pop2 <- TravelData[,.N,by=c("origin","destination","toFromPrefix")]
pop2 <- TravelData[,.N,by=c("origin","destination")]
group_by(TravelData,toFromPrefix)
View(pop2)
View(County_Town_NameList)
unique(pop)
unique(pop2)
unique(TravelData$toFromPrefix)
length(unique(TravelData$toFromPrefix))
length(unique(TravelData$OriginTripTownName))
length(unique(TravelData$origin))
length(unique(TravelData$origin,TravelData$destination))
length(unique(TravelData$origin & TravelData$destination))
#test
TravelData[,toFromPrefix="臺北市文山區-臺北市中正區"]
#test
TravelData[,TravelData$toFromPrefix="臺北市文山區-臺北市中正區"]
#test
TravelData[,TravelData$toFromPrefix=="臺北市文山區-臺北市中正區"]
#test
TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"]
#test
which(TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"])
#test
length(which(TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"]))
length(which(TravelData[,origin=="A11" & destination="A03"]))
length(which(TravelData[,origin=="A11" & destination=="A03"]))
length(which(TravelData[,origin=="A11" && destination=="A03"]))
TravelData[,origin=="A11" & destination=="A03"]
TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"]
TravelData[1,toFromPrefix=="臺北市文山區-臺北市中正區"]
select(TravelData,toFromPrefix=="臺北市文山區-臺北市中正區")
select(TravelData,TravelData$toFromPrefix=="臺北市文山區-臺北市中正區")
select(TravelData,c("toFromPrefix"=="臺北市文山區-臺北市中正區")
select(TravelData,c("toFromPrefix"=="臺北市文山區-臺北市中正區"))
filter(TravelData,c("toFromPrefix"=="臺北市文山區-臺北市中正區"))
filter(TravelData,toFromPrefix=="臺北市文山區-臺北市中正區"))
filter(TravelData,toFromPrefix=="臺北市文山區-臺北市中正區")
filter(TravelData,origin=="臺北市文山區" & destination=="臺北市中正區")
filter(TravelData,origin=="臺北市文山區" && destination=="臺北市中正區")
filter(TravelData,origin=="臺北市文山區" )
filter(TravelData,origin=="A11" && destination=="A03")
filter(TravelData,origin=="A11" & destination=="A03")
filter(TravelData,OriginTripTownName="臺北市文山區" & TravelData$DestinationTripTownName=="臺北市中正區") #155
filter(TravelData,OriginTripTownName="臺北市文山區" & DestinationTripTownName=="臺北市中正區") #155
TravelData$Mode
TravelData$OriginTripTownName
TravelData$origin
TravelData$toFromPrefix
filter(TravelData,OriginTripTownName="臺北市文山區" & DestinationTripTownName=="臺北市中正區") #155
TravelData$OriginTripTownName
filter(TravelData,OriginTripTownName=="臺北市文山區" & DestinationTripTownName =="臺北市中正區") #155
filter(TravelData,OriginTripTownName=="臺北市文山區") #155
View(TP_SHP)
#test
length(which(TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"]))
length(which(TravelData[,origin=="A11" & destination=="A03"]))
length(which(TravelData[,origin=="A11"]))
length(which(TravelData[,OriginTripTownName=="臺北市文山區"]))
length(which(TravelData[,origin=="A11"]))
substr(TP_SHP$TOWNNAME,3)
substr(TP_SHP$TOWNNAME,1,3)
#Import Travel Data and Town shp
setwd("D:\\TUM\\TS\\Master Thesis\\matsim-example-project\\src\\main\\java\\org\\matsim\\Demand")
TravelData <- read.csv("NationalTravelSurveyData_Weighted.csv",encoding = "UTF-8",header = T, stringsAsFactors=F)
TP_SHP <- st_read(dsn="D:\\TUM\\TS\\Master Thesis\\matsim-example-project\\src\\main\\java\\org\\matsim\\Demand\\SHP", layer="TPMetropolitanDistricts")
County_Town_NameList <- read.csv("County_Town_NameList.csv",header = T, stringsAsFactors=F)
# Assign County and Town name to TravelData
for(i in 1:nrow(TravelData)){
for(j in 1:nrow(County_Town_NameList)){
if(TravelData$OriginTripDistrict[i] == County_Town_NameList$COUNTY_TOWN_ID[j]) {
TravelData$OriginTripTownName[i] <- County_Town_NameList$COUNTY_TOWN_NAME[j]
}
if(TravelData$TripPurposeDistrict[i] == County_Town_NameList$COUNTY_TOWN_ID[j]) {
TravelData$DestinationTripTownName[i] <- County_Town_NameList$COUNTY_TOWN_NAME[j]
}}}
rm(i,j)
#Combine TP_SHP County and Town name
TP_SHP$COUNTY_TOWN_NAME <- paste(TP_SHP$COUNTYNAME,substr(TP_SHP$TOWNNAME,1,3),sep = "") #基隆市多一個基
TP_SHP$TOWNID <- as.character(TP_SHP$TOWNID)
for(i in 1:nrow(TravelData)){
for(j in 1:nrow(TP_SHP)){
if(TravelData$OriginTripTownName[i] == TP_SHP$COUNTY_TOWN_NAME[j]) {
TravelData$origin[i] <- TP_SHP$TOWNID[j]
}
if(TravelData$DestinationTripTownName[i] == TP_SHP$COUNTY_TOWN_NAME[j]) {
TravelData$destination[i] <- TP_SHP$TOWNID[j]
}}}
rm(i,j)
TravelData$toFromPrefix <- paste(TravelData$OriginTripTownName,TravelData$DestinationTripTownName,sep = "-")
#Extract data
names(TravelData)[1] <- "Person_ID"
TravelData$TotalTravelTime <- TravelData$TravelTime_1 + TravelData$TravelTime_2 + TravelData$TravelTime_3 + TravelData$TravelTime_4
TravelData$OutVehTime <- TravelData$TotalTravelTime - TravelData$InVehTime
TravelData <- as.data.table(select(TravelData,c("Person_ID","Age","TripPurpose","Mode","Mode_1","Mode_2","Mode_3","Mode_4",
"TotalTravelTime","InVehTime","OutVehTime","TravelTime_1","TravelTime_2","TravelTime_3","TravelTime_4",
"origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix")))
pop <- TravelData[,.N,by=c("toFromPrefix")]
pop2 <- TravelData[,.N,by=c("origin","destination")]
#test 臺北市文山區wrong
length(which(TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"]))
length(which(TravelData[,origin=="A11" & destination=="A03"]))
length(which(TravelData[,OriginTripTownName=="臺北市文山區"]))
length(which(TravelData[,origin=="A11"]))
filter(TravelData,toFromPrefix=="臺北市文山區-臺北市中正區") #155
filter(TravelData,origin=="A11" & destination=="A03") #3365
filter(TravelData,OriginTripTownName=="臺北市文山區" & DestinationTripTownName =="臺北市中正區") #155
length(which(TravelData[,toFromPrefix=="臺北市文山區-臺北市中正區"])) ==
length(which(TravelData[,origin=="A11" & destination=="A03"]))
setdiff(pop2$N,pop$N)
setdiff(TravelData[,.N,by=c("toFromPrefix")],TravelData[,.N,by=c("origin","destination")])
setdiff(TravelData[2,.N,by=c("toFromPrefix")],TravelData[3,.N,by=c("origin","destination")])
setdiff(TravelData[1,.N,by=c("toFromPrefix")],TravelData[1,.N,by=c("origin","destination")])
TravelData[1,.N,by=c("toFromPrefix")]
setdiff(TravelData[3,.N,by=c("toFromPrefix")],TravelData[2,.N,by=c("origin","destination")])
TravelData[,.N,by=c("origin","destination")]
setdiff(TravelData[2,.N,by=c("toFromPrefix")],TravelData[3,.N,by=c("origin","destination")])
setdiff(TravelData[3,.N,by=c("toFromPrefix")],TravelData[3,.N,by=c("origin","destination")])
TravelData[,.N,by=c("toFromPrefix")]
TravelData[2,.N,by=c("toFromPrefix")]
setdiff(pop$N,pop2$N)
rm(pop2)
carShare <- TravelData[,.N,by=c("toFromPrefix","Mode")] #also can derive share of other mode like scooterShare
carShare <- TravelData[,.N,by=c("origin","destination","Mode")]
View(pop)
TravelData[,.N,by=c("origin","destination","toFromPrefix")]
#check correctness of OD names
pop <- TravelData[,.N,by=c("origin","destination","toFromPrefix")]
pop2 <- TravelData[,.N,by=c("origin","destination")]
setdiff(pop$N,pop2$N)
rm(pop2)
TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix")]
#check correctness of OD names
pop <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix")]
pop2 <- TravelData[,.N,by=c("origin","destination")]
setdiff(pop$N,pop2$N)
rm(pop2)
TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","mode")]
TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
rm(carShare)
View(modeShare)
full_join(modeShare,pop)
View(pop)
left_join(modeShare,pop)
right_join(modeShare,pop)
modeShare <- left_join(modeShare,pop)
View(modeShare)
names(pop$N)
ncolames(pop$N)
colames(pop$N)
colnames(pop$N)
names(pop)[6]
names(pop)[6]<-TotalPop
rm(pop2)
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
left_join(modeShare,pop)
View(pop)
names(pop)[6]<-"TotalPop"
rm(pop2)
View(pop)
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
View(modeShare)
left_join(modeShare,pop)
modeShare <- left_join(modeShare,pop)
modeShare$N/modeShare$TotalPop
modeShare$ModeShare <- modeShare$N/modeShare$TotalPop
View(modeShare)
spread(modeShare, toFromPrefix, Mode, ModeShare)
spread(modeShare,  Mode, toFromPrefix, ModeShare)
View(modeShare)
spread(modeShare, Mode, toFromPrefix,ModeShar)
spread(modeShare, Mode, toFromPrefix,ModeShare)
spread(modeShare, Mode, toFromPrefix)
spread(modeShare, Mode, ModeShare)
temp <- spread(modeShare, Mode, ModeShare)
setdiff(temp,modeShare)
setdiff(temp$toFromPrefix,modeShare$toFromPrefix)
View(temp)
temp[is.na(temp)]
is.na(temp)
temp[is.na(temp)]
temp[,which(is.na(temp))]
temp[,which(is.na(temp))] <- 0
temp
temp[which(is.na(temp))]
temp[which(is.na(temp))] <- 0
View(temp)
temp[(is.na(temp))]
temp[,(is.na(temp))]
temp[is.na(temp)]
temp <- as.data.table(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)]
library(data.table)
temp[is.na(temp)]
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)]
temp[is.na(temp)] <- 0
setdiff(temp$toFromPrefix,modeShare$toFromPrefix)
setdiff(modeShare$toFromPrefix, temp$toFromPrefix)
setdiff(modeShare$origin, temp$origin)
setdiff(modeShare$TotalPop, temp$TotalPop)
View(modeShare)
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
modeShare <- left_join(modeShare,pop)
modeShare$ModeShare <- modeShare$N/modeShare$TotalPop
View(pop)
View(modeShare)
spread(modeShare, Mode, ModeShare, N)
spread(modeShare, Mode, ModeShare, TotalPop)
spread(modeShare, Mode, ModeShare)
View(temp)
spread(modeShare, Mode, N)
temp <- as.data.frame(spread(modeShare, Mode, N))
temp[is.na(temp)] <- 0
1:nrow(modeShare)
modeShare$ID <- 1:nrow(modeShare) #Add id to indentify each OD matrix since with same share, R will consider as same row
temp <- as.data.frame(spread(modeShare, Mode, N))
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)] <- 0
modeShare[order(modeShare$toFromPrefix),]
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
modeShare <- left_join(modeShare,pop)
modeShare$ModeShare <- modeShare$N/modeShare$TotalPop
modeShare <- modeShare[order(modeShare$toFromPrefix),]
modeShare$ID <- 1:nrow(modeShare) #Add id to indentify each OD matrix since some modes have same share, R will combine them as same row
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)] <- 0
names(temp)[c(9:16)]
names(temp)[c(9:16)] <- c("car","scooter","train", "taxi", "MRT", "bus", "bike", "walk")
names(temp)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
1:(nrow(temp)-1)
temp$shareOfCar[1] + temp$shareOfCar[2]
temp[,c(9:16)]
temp[1,c(9:16)] + temp[2,c(9:16)]
for (i in 1:(nrow(temp)-1)) {
if(temp$toFromPrefix[i]==temp$toFromPrefix[i+1]){
temp[i+1,c(9:16)] <- temp[i,c(9:16)] + temp[i+1,c(9:16)]
}
}
temp[-1,]
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)] <- 0
names(temp)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
for (i in 1:(nrow(temp)-1)) {
if(temp$toFromPrefix[i]==temp$toFromPrefix[i+1]){
temp[i+1,c(9:16)] <- temp[i,c(9:16)] + temp[i+1,c(9:16)]
temp[-i,]
}
}
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)] <- 0
names(temp)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
for (i in 1:(nrow(temp)-1)) {
if(temp$toFromPrefix[i]==temp$toFromPrefix[i+1]){
temp[i+1,c(9:16)] <- temp[i,c(9:16)] + temp[i+1,c(9:16)]
deleteData <- append(temp[i,])
}
}
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)] <- 0
names(temp)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
reduceIndex <- 0
for (i in 1:(nrow(temp)-1)) {
if(temp$toFromPrefix[i]==temp$toFromPrefix[i+1]){
temp[i+1,c(9:16)] <- temp[i,c(9:16)] + temp[i+1,c(9:16)]
reduceIndex <- append(reduceIndex,i)
}
}
temp <- as.data.frame(spread(modeShare, Mode, ModeShare))
temp[is.na(temp)] <- 0
names(temp)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
reduceIndex <- NULL
for (i in 1:(nrow(temp)-1)) {
if(temp$toFromPrefix[i]==temp$toFromPrefix[i+1]){
temp[i+1,c(9:16)] <- temp[i,c(9:16)] + temp[i+1,c(9:16)]
reduceIndex <- append(reduceIndex,i)
}
}
temp[reduceIndex,]
temp[-reduceIndex,]
nrow(temp)
nrow(reduceIndex)
length(reduceIndex)
temp <- temp[-reduceIndex,]
OutputData <- as.data.frame(spread(modeShare, Mode, ModeShare))
OutputData[is.na(OutputData)] <- 0
names(OutputData)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
reduceIndex <- NULL
for (i in 1:(nrow(OutputData)-1)) {
if(OutputData$toFromPrefix[i]==OutputData$toFromPrefix[i+1]){
OutputData[i+1,c(9:16)] <- OutputData[i,c(9:16)] + OutputData[i+1,c(9:16)]
reduceIndex <- append(reduceIndex,i)
}
}
OutputData <- OutputData[-reduceIndex,]
#check if the number of OD is correct
setdiff(nrow(OutputData),nrow(modeShare))
#check if the number of OD is correct
setdiff(nrow(OutputData),nrow(modeShare))
#check if the number of OD is correct
nrow(OutputData)==nrow(modeShare)
nrow(modeShare)
#check if the number of OD is correct
nrow(OutputData)==nrow(pop)
View(OutputData)
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
modeShare <- left_join(modeShare,pop)
modeShare$ModeShare <- modeShare$N/modeShare$population
modeShare <- modeShare[order(modeShare$toFromPrefix),]
modeShare$ID <- 1:nrow(modeShare) #Add id to indentify each OD matrix since some modes have same share, R will combine them as same row
OutputData <- as.data.frame(spread(modeShare, Mode, ModeShare))
OutputData[is.na(OutputData)] <- 0
names(OutputData)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
reduceIndex <- NULL
for (i in 1:(nrow(OutputData)-1)) {
if(OutputData$toFromPrefix[i]==OutputData$toFromPrefix[i+1]){
OutputData[i+1,c(9:16)] <- OutputData[i,c(9:16)] + OutputData[i+1,c(9:16)]
reduceIndex <- append(reduceIndex,i)
}
}
OutputData <- OutputData[-reduceIndex,]
OutputData <- select(OutputData, c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk"))
#check if the number of OD is correct
nrow(OutputData)==nrow(pop)
View(temp)
View(OutputData)
#check correctness of OD names
pop <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix")]
pop2 <- TravelData[,.N,by=c("origin","destination")]
setdiff(pop$N,pop2$N)
names(pop)[6]<-"population"
rm(pop2)
modeShare <- TravelData[,.N,by=c("origin","destination","OriginTripTownName","DestinationTripTownName","toFromPrefix","Mode")]
modeShare <- left_join(modeShare,pop)
modeShare$ModeShare <- modeShare$N/modeShare$population
modeShare <- modeShare[order(modeShare$toFromPrefix),]
modeShare$ID <- 1:nrow(modeShare) #Add id to indentify each OD matrix since some modes have same share, R will combine them as same row
OutputData <- as.data.frame(spread(modeShare, Mode, ModeShare))
OutputData[is.na(OutputData)] <- 0
names(OutputData)[c(9:16)] <- c("shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk")
reduceIndex <- NULL
for (i in 1:(nrow(OutputData)-1)) {
if(OutputData$toFromPrefix[i]==OutputData$toFromPrefix[i+1]){
OutputData[i+1,c(9:16)] <- OutputData[i,c(9:16)] + OutputData[i+1,c(9:16)]
reduceIndex <- append(reduceIndex,i)
}
}
View(OutputData)
OutputData[-reduceIndex,]
OutputData <- OutputData[-reduceIndex,]
View(OutputData)
select(OutputData, c("population","origin","destination","toFromPrefix","shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk"))
OutputData <- select(OutputData, c("population","origin","destination","toFromPrefix","shareOfCar","shareOfScooter","shareOfTrain", "shareOfTaxi",
"shareOfMRT", "shareOfBus", "shareOfBike", "shareOfWalk"))
rm(County_Town_NameList, ModeShare, pop, temp,TP_SHP, TravelData)
rm(County_Town_NameList, ModeShare, pop,TP_SHP, TravelData, i, redeuceId)
rm(County_Town_NameList, ModeShare, pop,TP_SHP, TravelData, i, redeuceIndex)
rm(County_Town_NameList, ModeShare, pop,TP_SHP, TravelData, i, reduceIndex)
rm(County_Town_NameList, modeShare, pop,TP_SHP, TravelData, i, reduceIndex)
write.csv(OutputData,"ODMatrix.csv")
